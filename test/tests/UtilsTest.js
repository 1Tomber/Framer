// Generated by CoffeeScript 1.9.3
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

describe("Utils", function() {
  describe("valueOrDefault", function() {
    it("should get a value", function() {
      return Utils.valueOrDefault(10, 0).should.equal(10);
    });
    return it("should get the default value", function() {
      return Utils.valueOrDefault(null, 0).should.equal(0);
    });
  });
  describe("arrayFromArguments", function() {
    return it("should work", function() {
      var f;
      f = function() {
        return Utils.arrayFromArguments(arguments);
      };
      f("a").should.eql(["a"]);
      f("a", "b").should.eql(["a", "b"]);
      f(["a"]).should.eql(["a"]);
      f(["a", "b"]).should.eql(["a", "b"]);
      f("monkey").should.eql(["monkey"]);
      return f(["monkey"]).should.eql(["monkey"]);
    });
  });
  describe("parseFunction", function() {
    it("should work without arguments", function() {
      var result;
      result = Utils.parseFunction("spring");
      result.name.should.equal("spring");
      return result.args.should.eql([]);
    });
    it("should work with a single argument", function() {
      var result;
      result = Utils.parseFunction("spring(100)");
      result.name.should.equal("spring");
      return result.args.should.eql(["100"]);
    });
    it("should work with multiple arguments", function() {
      var result;
      result = Utils.parseFunction("spring(100,50)");
      result.name.should.equal("spring");
      return result.args.should.eql(["100", "50"]);
    });
    return it("should cleanup arguments", function() {
      var result;
      result = Utils.parseFunction("spring(100 , 50 )");
      result.name.should.equal("spring");
      return result.args.should.eql(["100", "50"]);
    });
  });
  describe("arrayNext", function() {
    return it("should work", function() {
      Utils.arrayNext(["a", "b", "c"], "a").should.equal("b");
      Utils.arrayNext(["a", "b", "c"], "b").should.equal("c");
      return Utils.arrayNext(["a", "b", "c"], "c").should.equal("a");
    });
  });
  describe("arrayPrev", function() {
    return it("should work", function() {
      Utils.arrayPrev(["a", "b", "c"], "a").should.equal("c");
      Utils.arrayPrev(["a", "b", "c"], "b").should.equal("a");
      return Utils.arrayPrev(["a", "b", "c"], "c").should.equal("b");
    });
  });
  describe("sizeMax", function() {
    return it("should work", function() {
      Utils.sizeMax([
        {
          width: 100,
          height: 100
        }, {
          width: 100,
          height: 100
        }
      ]).should.eql({
        width: 100,
        height: 100
      });
      return Utils.sizeMax([
        {
          width: 1000,
          height: 1000
        }, {
          width: 100,
          height: 100
        }
      ]).should.eql({
        width: 1000,
        height: 1000
      });
    });
  });
  describe("pathJoin", function() {
    return it("should work", function() {
      return Utils.pathJoin("test", "monkey").should.equal("test/monkey");
    });
  });
  describe("sizeMin", function() {
    return it("should work", function() {
      Utils.sizeMin([
        {
          width: 100,
          height: 100
        }, {
          width: 100,
          height: 100
        }
      ]).should.eql({
        width: 100,
        height: 100
      });
      return Utils.sizeMin([
        {
          width: 1000,
          height: 1000
        }, {
          width: 100,
          height: 100
        }
      ]).should.eql({
        width: 100,
        height: 100
      });
    });
  });
  describe("frameMerge", function() {
    return it("should work", function() {
      var compare;
      compare = function(frames, result) {
        var frame, i, len, p, ref, results;
        frame = Utils.frameMerge(frames);
        ref = ["x", "y", "width", "height"];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          p = ref[i];
          results.push(frame[p].should.equal(result[p], p));
        }
        return results;
      };
      compare([
        {
          x: 0,
          y: 0,
          width: 100,
          height: 100
        }, {
          x: 0,
          y: 0,
          width: 100,
          height: 100
        }
      ], {
        x: 0,
        y: 0,
        width: 100,
        height: 100
      });
      compare([
        {
          x: 0,
          y: 0,
          width: 100,
          height: 100
        }, {
          x: 0,
          y: 0,
          width: 500,
          height: 500
        }
      ], {
        x: 0,
        y: 0,
        width: 500,
        height: 500
      });
      compare([
        {
          x: 0,
          y: 0,
          width: 100,
          height: 100
        }, {
          x: 100,
          y: 100,
          width: 500,
          height: 500
        }
      ], {
        x: 0,
        y: 0,
        width: 600,
        height: 600
      });
      return compare([
        {
          x: 100,
          y: 100,
          width: 100,
          height: 100
        }, {
          x: 100,
          y: 100,
          width: 500,
          height: 500
        }
      ], {
        x: 100,
        y: 100,
        width: 500,
        height: 500
      });
    });
  });
  describe("framePointForOrigin", function() {
    return it("should work", function() {
      Utils.framePointForOrigin({
        x: 100,
        y: 100,
        width: 100,
        height: 100
      }, 0, 0).should.eql({
        x: 100,
        y: 100,
        width: 100,
        height: 100
      });
      Utils.framePointForOrigin({
        x: 100,
        y: 100,
        width: 100,
        height: 100
      }, 0, 0).should.eql({
        x: 100,
        y: 100,
        width: 100,
        height: 100
      });
      Utils.framePointForOrigin({
        x: 100,
        y: 100,
        width: 100,
        height: 100
      }, 0, 0).should.eql({
        x: 100,
        y: 100,
        width: 100,
        height: 100
      });
      return Utils.framePointForOrigin({
        x: 100,
        y: 100,
        width: 100,
        height: 100
      }, 0, 0).should.eql({
        x: 100,
        y: 100,
        width: 100,
        height: 100
      });
    });
  });
  describe("modulate", function() {
    return it("should have the right results", function() {
      Utils.modulate(0.5, [0, 1], [0, 100]).should.equal(50);
      Utils.modulate(1, [0, 1], [0, 100]).should.equal(100);
      Utils.modulate(2, [0, 1], [0, 100], true).should.equal(100);
      Utils.modulate(2, [0, 1], [0, 100], false).should.equal(200);
      Utils.modulate(0, [1, 2], [0, 100], true).should.equal(0);
      Utils.modulate(0, [1, 2], [0, 100], false).should.equal(-100);
      Utils.modulate(0, [1, 2], [100, 0], true).should.equal(100);
      return Utils.modulate(0, [1, 2], [100, 0], false).should.equal(200);
    });
  });
  describe("clamp", function() {
    return it("should have the right results", function() {
      Utils.clamp(3, 4, 6).should.equal(4);
      Utils.clamp(3, 6, 4).should.equal(4);
      Utils.clamp(5, 6, 4).should.equal(5);
      return Utils.clamp(5, 6, -4).should.equal(5);
    });
  });
  describe("textSize", function() {
    return it("should have the right text size", function() {
      var style, text;
      text = "Hello Koen Bok";
      return style = {
        font: "20px/1em Menlo"
      };
    });
  });
  describe("frameSortByAbsoluteDistance", function() {
    it("should sort x", function() {
      var layerA, layerB, layerC;
      layerA = new Layer({
        x: 300,
        y: 100
      });
      layerB = new Layer({
        x: 100,
        y: 100
      });
      layerC = new Layer({
        x: 200,
        y: 100
      });
      return Utils.frameSortByAbsoluteDistance({
        x: 0,
        y: 0
      }, [layerA, layerB, layerC]).should.eql([layerB, layerC, layerA]);
    });
    return it("should sort", function() {
      var layerA, layerB, layerC;
      layerA = new Layer({
        x: 500,
        y: 500
      });
      layerB = new Layer({
        x: 300,
        y: 300
      });
      layerC = new Layer({
        x: 100,
        y: 100
      });
      return Utils.frameSortByAbsoluteDistance({
        x: 0,
        y: 0
      }, [layerA, layerB, layerC]).should.eql([layerC, layerB, layerA]);
    });
  });
  describe("inspect", function() {
    it("should work for strings", function() {
      return Utils.inspect("a").should.equal("\"a\"");
    });
    it("should work for booleans", function() {
      return Utils.inspect(true).should.equal("true");
    });
    it("should work for numbers", function() {
      return Utils.inspect(12.34).should.equal("12.34");
    });
    it("should work for null", function() {
      return Utils.inspect(null).should.equal("null");
    });
    it("should work for undefined", function() {
      return Utils.inspect(void 0).should.equal("undefined");
    });
    it("should work for arrays", function() {
      return Utils.inspect(["a", 1, ["b", "c"]]).should.equal("[\"a\", 1, [\"b\", \"c\"]]");
    });
    it("should work for objects", function() {
      return Utils.inspect({
        a: 1,
        b: [1, 2, 3]
      }).should.equal("{a:1, b:[1, 2, 3]}");
    });
    it("should work for functions", function() {
      var test;
      test = function() {
        return "a";
      };
      return Utils.inspect(test).should.equal("<Function () { return \"a\"; }>");
    });
    it("should work for functions with arguments", function() {
      var test;
      test = function(a) {
        return "a";
      };
      return Utils.inspect(test).should.equal("<Function (a) { return \"a\"; }>");
    });
    it("should work for named functions", function() {
      function test(a) { return "a"; };
      return Utils.inspect(test).should.equal("<Function test(a) { return \"a\"; }>");
    });
    it("should work for long functions", function() {
      var test;
      test = function() {
        var down, here, its, rainy, today, very;
        its = 1;
        very = 1;
        rainy = 1;
        today = 1;
        down = 1;
        here = 1;
        return "a";
      };
      Utils.inspect(test).should.equal("<Function () { var down, here, its, rainy, today, very; its = 1; very = 1; rainy = 1; today = 1; down = 1; here = 1; return \"a\"; }>");
      return Utils.inspect([test]).should.equal("[<Function () { var down, here, its, rainy, today, very; its =… }>]");
    });
    it("should work for classes", function() {
      var TestClass, instance;
      TestClass = (function() {
        function TestClass() {
          this.a = 1;
        }

        return TestClass;

      })();
      instance = new TestClass;
      return Utils.inspect(instance).should.equal("<TestClass {a:1}>");
    });
    it("should work for subclasses", function() {
      var SubTestClass, TestClass, instance;
      TestClass = (function() {
        function TestClass() {
          this.a = 1;
        }

        return TestClass;

      })();
      SubTestClass = (function(superClass) {
        extend(SubTestClass, superClass);

        function SubTestClass() {
          return SubTestClass.__super__.constructor.apply(this, arguments);
        }

        return SubTestClass;

      })(TestClass);
      instance = new SubTestClass;
      return Utils.inspect(instance).should.equal("<SubTestClass {a:1}>");
    });
    it("should work with toInspect", function() {
      var TestClass, instance;
      TestClass = (function() {
        function TestClass() {}

        TestClass.prototype.toInspect = function() {
          return "Hello";
        };

        return TestClass;

      })();
      instance = new TestClass;
      return Utils.inspect(instance).should.equal("Hello");
    });
    it("should work with WebKitCSSMatrix", function() {
      var instance;
      instance = new WebKitCSSMatrix();
      return Utils.inspect(instance).should.equal("<WebKitCSSMatrix {e:0, m33:1, f:0, m42:0, m44:1, m24:0, m31:0, m32:0, m21:0, m14:0, c:0, m34:0, m13:0, m12:0, m11:1, m41:0, m23:0, b:0, d:1, m22:1, a:1, m43:0}>");
    });
    it("should work with HTMLDivElement", function() {
      var instance;
      instance = document.createElement("div");
      return Utils.inspect(instance).should.equal("<HTMLDivElement>");
    });
    it("should work with HTMLDivElementConstructor", function() {
      var instance;
      instance = document.createElement("div");
      Utils.inspectObjectType(instance.constructor).should.equal("HTMLDivElementConstructor");
      return Utils.inspect(instance.constructor).should.equal("<HTMLDivElementConstructor>");
    });
    it("should work with CSSStyleDeclaration", function() {
      var instance;
      instance = document.createElement("div");
      return Utils.inspect(instance.style).should.equal("<CSSStyleDeclaration {}>");
    });
    return it("should work with LayerDraggable", function() {
      var layer;
      layer = new Layer;
      return Utils.inspectObjectType(layer.draggable).should.equal("LayerDraggable");
    });
  });
  return describe("keyPath", function() {
    it("should get with single", function() {
      var obj;
      obj = {
        foo: "bar"
      };
      return Utils.getValueForKeyPath(obj, "foo").should.equal("bar");
    });
    it("should get with multipe", function() {
      var obj;
      obj = {
        fooA: {
          fooB: {
            fooC: "bar"
          }
        }
      };
      return Utils.getValueForKeyPath(obj, "fooA.fooB.fooC").should.equal("bar");
    });
    it("should set with single", function() {
      var obj;
      obj = {};
      Utils.setValueForKeyPath(obj, "foo", "bar");
      return obj.should.eql({
        foo: "bar"
      });
    });
    return it("should set with multiple", function() {
      var obj;
      obj = {
        fooA: {
          fooB: {}
        }
      };
      Utils.setValueForKeyPath(obj, "fooA.fooB.fooC", "bar");
      return obj.should.eql({
        fooA: {
          fooB: {
            fooC: "bar"
          }
        }
      });
    });
  });
});
